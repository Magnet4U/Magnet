@model Domain.Entities.Message

@{
    ViewBag.Title = "Create";

}


@if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
{
    if (ViewBag.Message != null)
    {
        <div class="alert-success">
            <strong> Success ! </strong>@ViewBag.Message
        </div>
    }
}
else
{
    <h2>Create</h2>


    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        if (ViewBag.Message != null)
        {
            <div class="alert alert-danger">
                <strong>Error ! </strong>@ViewBag.Message
            </div>
        }
        <div class="form-horizontal">
            <h4>Message</h4>
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @*@Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })*@
                @Html.LabelFor(model => model.idUser, "idUser", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@Html.EditorFor(model => model.CategoryId, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownList("idUser", (SelectList)ViewData["UserList"])
                    @*@Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })*@
                    @Html.ValidationMessageFor(model => model.idUser)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.subject, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.subject, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.subject, "", new { @class = "text-danger" })
                </div>
            </div>

            @* <div class="form-group">
                    @Html.LabelFor(model => model.destination, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @{ IEnumerable<Domain.Entities.User> prods = ViewBag.users;}
                        @Html.DropDownListFor(model => model.idDestination, prods.Select(p => new SelectListItem { Value = p.idUser.ToString(), Text = p.firstname + ' ' + p.lastname }))
                        @Html.ValidationMessageFor(model => model.destination, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*
                <div class="form-group">
                    @Html.LabelFor(model => model.destination, "Destination", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.destination, new SelectList(ViewBag.Entreprises, "idUser", "firstname"), "select", new { htmlAttributes = new { @class = "selectpicker border rounded" } })
                        @Html.ValidationMessageFor(model => model.destination, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.body, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.body, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.body, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    
}